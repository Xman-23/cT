package high;

import java.util.*;
import java.lang.*;
import java.math.*;
import java.io.*;
import java.time.*;
import java.time.format.*;

public class CT_High {
	public static void main(String[] args) {
		//CTHigh.d();
		//CTHigh.dd();
		//CTHigh.ddd();
		CTHigh.dddd();
		//int max = Math.max(1,2);
		//System.out.println(max);
	}
}

class CTHigh {

	CTHigh() {
		super();
	}
	//Í¥ÑÌò∏ Ïßù ÎßûÏ∂îÍ∏∞
	public static void d() {

		Scanner scanner = new Scanner(System.in);

		Stack<Character> stack = new Stack<Character>();
		String string = scanner.nextLine();
		boolean isFalse = false;

		for(int i=0; i<string.length(); i++) {
			char ch = string.charAt(i);
			if(ch == '(') {
				stack.push(ch);
			}else if(ch == ')') {
				//stack ÎπÑÏñ¥ÏûàÎã§ÎäîÍ≤ÉÏùÄ '(' ÏóÜÎã§ÎäîÍ≤ÉÏù¥ÎØÄÎ°ú, 
				//Ïßù ÏûêÏ≤¥Í∞Ä Ïïà ÎßûÍ∏∞ ÎïåÎ¨∏Ïóê 1Ï§ë for Î¨∏ ÌÉàÏ∂ú break;
				if(stack.isEmpty()) {
					break;
				//stack ÎπÑÏñ¥ÏûàÏßÄÏïäÎã§ÎäîÍ≤ÉÏùÄ Ïä§ÌÉù ÏïàÏóê '('Í∞Ä ÏûàÎã§ÎäîÍ≤ÉÏù¥ÎØÄÎ°ú
				//Ïßù ÎπÑÍµê
				}else {
					stack.pop(); //')' ÎßûÏùÑ Í≤ΩÏö∞ '('Î•º Ïä§ÌÉù ÏïàÏóêÏÑú Í∫ºÎÇ¥Î©¥ÏÑú Ïßù ÎßûÏ∂îÍ∏∞
				}
			}
		}
		//ÏßùÏù¥ ÎßûÎã§Î©¥ÏùÄ stack ÏïàÏóê '(' Îã§ ÎπÑÏõåÏßÄÎØÄÎ°ú Í≥µÎ∞±Ïù¥ ÎêúÎã§ Í∑∏Îü¨ÎØÄÎ°ú is False
		if(stack.isEmpty()) {
			isFalse = true;
		}
		System.out.println(isFalse);
	}
	/*
	 19. Ïà´Ïûê Ï°∞Ìï©ÏúºÎ°ú ÌäπÏ†ï Ïàò ÎßåÎì§Í∏∞
	üß† ÌíÄÏù¥ ÏÑ§Î™Ö
	ÏûÖÎ†•Î∞õÏùÄ ÏàòÎì§ Ï§ë 3Í∞úÎ•º Í≥®Îùº Ìï©Ïù¥ KÍ∞Ä ÎêòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.

	3Ï§ë forÎ¨∏ÏùÑ ÏÇ¨Ïö©Ìï¥ Î™®Îì† Ï°∞Ìï©ÏùÑ ÌÉêÏÉâÌï©ÎãàÎã§.
	*/
	public static void dd() {

		Scanner scanner = new Scanner(System.in);

		int arrayLength = scanner.nextInt();
		int targetNumber = scanner.nextInt();
		int[] intArray = new int[arrayLength];
		boolean returnBoolean = false;
		for(int i=0; i<intArray.length; i++) {
			intArray[i] = scanner.nextInt();
		}
		System.out.println(Arrays.toString(intArray));

		for(int i=0; i<intArray.length-2; i++) {
			for(int j=i+1; i<intArray.length-1;j++) {
				for(int l=j+1; i<intArray.length; l++ ) {
					if(intArray[i] + intArray[j] + intArray[j] == targetNumber) {
						returnBoolean = true;
						//3Ï§ë forÎ¨∏ ÌÉàÏ∂ú (L)
						break;
					}
				}
				//2Ï§ë forÎ¨∏ ÌÉàÏ∂ú(J)
				if(returnBoolean) {
					break;
				}
			}
			//1Ï§ë forÎ¨∏ ÌÉàÏ∂ú(I)
			if(returnBoolean) {
				break;
			}
		}
		System.out.println(returnBoolean);
	}
	/*
	 20. Ïó∞ÏÜç Î∂ÄÎ∂ÑÌï© ÏµúÎåÄÍ∞í
	üß† ÌíÄÏù¥ ÏÑ§Î™Ö
	Ïó∞ÏÜçÎêú Î∂ÄÎ∂Ñ ÏàòÏó¥Ïùò ÏµúÎåÄ Ìï©ÏùÑ Íµ¨ÌïòÎäî Î¨∏Ï†ú ‚Üí Kadane's Algorithm ÏÇ¨Ïö©.

	ÌòÑÏû¨ ÏúÑÏπòÍπåÏßÄÏùò ÏµúÎåÄ Ïó∞ÏÜç Ìï©ÏùÑ Ïú†ÏßÄÌïòÎ©∞ Ï†ÑÏ≤¥ ÏµúÎåÄÍ∞íÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
	 */
	public static void ddd() {

		Scanner scanner = new Scanner(System.in);

		int arrayLength = scanner.nextInt();
		int[] intArray = new int[arrayLength];

		for(int i=0; i<intArray.length; i++) {
			intArray[i] = scanner.nextInt();
		}

		int sumCurrent	= intArray[0];
		int maxReturn 	= intArray[0];

		for(int i=1; i<intArray.length; i++) {
			int current = intArray[i];
			sumCurrent 	= Math.max(current, sumCurrent+current);
			maxReturn	= Math.max(maxReturn, sumCurrent);
		}
		System.out.println(maxReturn);
	}
	/*
	 19. Ïà´Ïûê Ï°∞Ìï©ÏúºÎ°ú ÌäπÏ†ï Ïàò ÎßåÎì§Í∏∞
	üß† ÌíÄÏù¥ ÏÑ§Î™Ö
	ÏûÖÎ†•Î∞õÏùÄ ÏàòÎì§ Ï§ë 2Í∞úÎ•º Í≥®Îùº Ìï©Ïù¥ KÍ∞Ä ÎêòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.

	2Ï§ë forÎ¨∏ÏùÑ ÏÇ¨Ïö©Ìï¥ Î™®Îì† Ï°∞Ìï©ÏùÑ ÌÉêÏÉâÌï©ÎãàÎã§.
	*/
	public static void dddd() {

		Scanner scanner = new Scanner(System.in);

		int arrayLength = scanner.nextInt();
		int[] intArray = new int[arrayLength];
		List<int[]> list = new ArrayList<int[]>();

		for(int i=0; i<intArray.length; i++) {
			intArray[i] = scanner.nextInt();
		}

		int targetNumber = scanner.nextInt();
		
		for(int i=0; i<intArray.length-1; i++) {
			for(int j=i+1; j<intArray.length; j++) {
				if(intArray[i] + intArray[j] == targetNumber) {
					list.add(new int[] {i,j});
				}
			}
		}

		System.out.println();
		
		
		for(int[] listInt :list) {
			int i=0;
			System.out.println(listInt.length);
		}
		
	}
}
